#!/bin/env bash

# check if file exist
fileExist() {
	if [ $# -eq 0 ]; then
		echo $T__NO_ARGS
		exit $ASD_CONST_EXIT_CODE_FAIL
	fi

	if [ ! -f "$1" ]; then
		echo "[$1] $T__FILE_NOT_EXIST"
		exit $ASD_CONST_EXIT_CODE_FAIL
	fi
}

# print message
# @ message
msg() {
	printf "${GREEN}${CMD_SEPARATOR}${CRESET} %s\n" "$1"
}

# print error message
# @ message
msgerr() {
	printf "${RED}${CMD_SEPARATOR} ${T__ERROR}${CMD_EMOJI_BAD}${CRESET} %s\n" "$1" >&2
}

# print warn message
# @ message
msgwarn() {
	printf "${YELLOW}${CMD_SEPARATOR} ${T__WARNING}:${CRESET} %s\n" "$1" >&2
}

# check for root
needroot() {	
	if [ "$(id -u)" != 0 ]; then
		if [ "$#" -eq 0 ]; then
			needroot $T__CURRENT_OP
		else
			msgerr "$* $T__NEED_ROOT"
		fi
		exit $ASD_CONST_EXIT_CODE_FAIL
	fi	
}

# show usage help
usage() {
	cat << EOF
Usage:
    $(basename $0) [<arg>]
    
Options:
    --help | -h                           show help info
    --config | -cfg                       show current config

EOF
}

# show config data
showcfg() {
	echo "$(<$ASD_CFG)"
}

# check is argument not null
# @ argument
checkArg() {
	if [ -z "$1" ]
		then
			msg "empty argument"
      		exit $ASD_CONST_EXIT_CODE_FAIL
	fi
}

# check file exist
# @ target directory
checkfileexist() {
	if [ ! -f "$1" ];
		then
			echo "File $1 DOES NOT exists." 
			exit 9999 # die with error code 9999
	fi
}

# init app
init() {
	fileExist $ASD_CFG
	needroot

	mkdir -pv $DbPath
	mkdir -pv $CachePath
	mkdir -pv $TempPath
	mkdir -pv $SrcPath
	mkdir -pv $LogPath
}

# fetch file
# @ source
# @ destination
fetch() {
	wget -q -N $1 --directory-prefix=$2
}

# search strinig in specified file
# @ search string
# @ source file
srch() {
	checkfileexist $2
	fonundResult=$(grep -a -m 1 -h -r "$1" "$2" | head -1)
	echo $fonundResult
}

# clean cache
clearcache() {
  rm -rf $CachePath/*
  rm -rf $TempPath/*
  rm -rf $LogPath/*
}

# clean source folder
clearsrc() {
 rm -rf $SrcPath/*
}

# fetch ports data source
fetchSource() {
	msg 'Start syncing...' 
	fetch $RepoSource $CachePath
	tar -xf $CachePath/$RepoArchName -C $CachePath
	msg  "Syncing complete..."
}

# fetch specific script from port
# @specified package
# @specifid port
fetchScript() {
	res=$(<$CachePath/$RepoName/src/packages/$1/$2)
	echo $res
}

# get script path
# @package name
# @script name
scriptpath() {
	checkArg $1
	checkArg $2
	res=$CachePath/$RepoName/src/packages/$1/$2
	echo $res
}

# search package in local ports tree
# @ search string
search() {
	fonundResult=$(srch $1 $RepoIndex)
	checkArg $fonundResult
	msg 'found package: '$fonundResult
}

# download package
# @ search string
download() {
	pkg=$(srch $1 $RepoIndex)
	checkArg $pkg
	msg "downloading $pkg"
	#url=$(<$CachePath/$RepoName/src/packages/$pkg/.url)
	url=$(fetchScript $pkg '.url')
	msg $url
	checkArg $url
	fetch $url $SrcPath
	msg "download $pkg complete"
}

# Get package name from url
# @ package name
namefromurl() {
	pkg=$(srch $1 $RepoIndex)
	checkArg $pkg
	filename=$(basename $(fetchScript $pkg '.url'))
	echo $filename
}

# Extract package
# @ package name
extract() {
	pkg=$(srch $1 $RepoIndex)
	checkArg $pkg
	filename=$(namefromurl $pkg)
	msg "extracting $filename to $SrcPath"
	tar -xf $SrcPath/$filename -C $SrcPath
}

install() {
	pkg=$(srch $1 $RepoIndex)
	checkArg $pkg
	download $pkg
	extract $pkg
	pkgname=$(fetchScript $pkg '.name')

	checkArg $2
	msg "Execute script '$2' for $pkgname ..."

	currentpath=$(pwd)
	pkgPath=$SrcPath/$pkgname

	cd $pkgPath

	export DESTDIR="$SrcPath/$pkgname-build"
	
	# getcommand path
	cmd=$(scriptpath $pkg $2)
	# execute command by path, and write to log, with specified script name prefix
	bash $cmd > $LogPath/$pkgname-$2
	unset DESTDIR
}